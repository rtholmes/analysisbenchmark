<project name="SimpleAnalysisBenchmark">
	<description>
        Benchmark program for testing static analyses. Adapted from Martin Robillard's JayFXBenchmark.
    </description>

	<property name="maxmemory" value="1024m" />

	<property name="build" location="build" />
	<property name="lib" location="lib" />

	<!-- sample code / tests -->
	<property name="sample" location="sample" />
	<property name="sample.src" location="${sample}/src" />
	<property name="sample.test" location="${sample}/test" />

	<!-- validation tests -->
	<property name="validation" location="validation" />
	<property name="validation.test" location="${validation}/test" />

	<!-- build directories -->
	<property name="build.sample" location="${build}/sample" />
	<property name="build.sample.test" location="${build}/sampleTest" />
	<property name="build.validation.test" location="${build}/validationTest" />

	<!-- report directories -->
	<property name="report" location="report" />
	<property name="report.sample" location="${report}/sample" />
	<property name="report.validation" location="${report}/validation" />

	<!-- sample system classpath -->
	<path id="classpath.sample">
		<fileset dir="${lib}/shared">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.sample}" />
		<pathelement path="${build.sample.test}" />
	</path>

	<!-- validation classpath -->
	<path id="classpath.validation">
		<!-- create classpath -->
		<fileset dir="${lib}/shared">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${lib}/validation">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.validation.test}" />
	</path>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
		<mkdir dir="${build.sample}" />
		<mkdir dir="${build.sample.test}" />
		<mkdir dir="${build.validation.test}" />
		<mkdir dir="${report.sample}" />
		<mkdir dir="${report.validation}" />
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete dir="${dist}" />
		<!-- stop deleting the reports all the time -->
		<!-- <delete dir="${report}" /> -->
	</target>


	<target name="compile" depends="compile.sample,compile.validation" description="compile the source" />

	<target name="compile.sample" depends="init" description="compile the sample system">
		<javac srcdir="${sample.src}" destdir="${build.sample}" includeantruntime="false" classpathref="classpath.sample" />
		<javac srcdir="${sample.test}" destdir="${build.sample.test}" includeantruntime="false" classpathref="classpath.sample" />
	</target>

	<target name="compile.validation" depends="init" description="compile the validation code">
		<javac srcdir="${validation.test}" destdir="${build.validation.test}" includeantruntime="false" classpathref="classpath.validation" />
	</target>

	<!--
	This old target was useful in the past; we'll keep it in case we need it in the future, 
	but it is commented out because it may turn out to be extraneous.
	<target name="jar" depends="compile" description="Packages JAR file and copies to depfind_uw for testing">
		<jar jarfile="${jarFile}">
			<zipfileset dir="${build.src}" prefix="" includes="**/*.class" />
		</jar>
		<copy file="${jarFile}" tofile="${depfindDir}/input.jar" overwrite="yes" />
	</target>
	-->

	<target name="test" depends="compile" description="perform tests">
		<junit maxmemory="${maxmemory}" printsummary="yes" haltonfailure="no" fork="yes" forkmode="once">
			<classpath refid="classpath.sample" />
			<formatter type="plain" />
			
			<batchtest todir="${report.sample}">
				<fileset dir="${sample.test}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	
	<!-- below this is old stuff that will hopefully disappear -->
	
	<path id="classpath.src.trace">
		<path refid="classpath.src" />
		<!-- rth: for dynamic -->
		<dirset dir="${lsmr.base}/bin" />
		<dirset dir="${dynamicTracer.home}/bin" />
		<fileset refid="lsmr.lib" />
		<fileset refid="dynamicTracer.lib" />
		<!-- end rth -->
	</path>

			
	<target name="dynamic" depends="compile.sample" description="perform tests">
		<junit maxmemory="${maxmemory}" printsummary="yes" haltonfailure="no" fork="yes" forkmode="once">
			<!--<jvmarg value="-Djava.compiler=NONE"/>-->

			<classpath refid="classpath.src.trace" />

			<formatter type="plain" />

			<batchtest todir="${report.srcTest}">
				<fileset dir="${src.test}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="validateStatic" depends="static" description="Validate static analyses">
		<junit maxmemory="${maxmemory}" printsummary="yes" haltonfailure="yes" fork="yes" forkmode="once">
			<!--<jvmarg value="-Djava.compiler=NONE"/>-->
			<classpath refid="classpath.eval" />

			<formatter type="plain" />

			<batchtest todir="${report.evalTest}">
				<fileset dir="${eval.test}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>


	<target name="static" depends="compile" description="perform static analyses">
		<!-- BUG: for unknown reasons 'ant clean; ant static' fails; some environmental thing isn't being set up quite right -->
		<dependencyextractor destfile="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.xml" xml="yes" minimize="yes">
			<path>
				<!-- <pathelement location="."/> -->
				<pathelement location="${build.src}" />
			</path>
		</dependencyextractor>

		<!-- make a copy of the latest extraction for easier reference -->
		<copy file="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.xml" tofile="${report.staticAnalysis}/static_latest.xml" />

		<!-- configure an HTML version of the report -->
		<!-- The stylesheet doesn't work with the UW XML format <xslt style="${dependencyfinder.home}/etc/DependencyGraphToHTML.xsl" in="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.xml" out="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.html" /> -->
		<!-- The stylesheet doesn't work with the UW XML format <copy file="${dependencyfinder.home}/etc/dependency.style.css" tofile="${report.staticAnalysis}/dependency.style.css" overwrite="no" /> -->
		<!-- The stylesheet doesn't work with the UW XML format <copy file="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.html" tofile="${report.staticAnalysis}/static_latest.html" /> -->
	</target>
	<!-- End DependencyFinder -->
</project>