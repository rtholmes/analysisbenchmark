<project name="SimpleAnalysisBenchmark" default="dist" basedir=".">
	<description>
        Benchmark program for testing static analyses. Adapted from Martin Robillard's JayFXBenchmark.
    </description>

	<!-- Main Locations -->
	<!-- src: 				the source files comprising the sample code -->
	<!-- src.test: 			tests that simulate the src code executing (for dynamic analyses) -->
	<!-- eval: 				code for building a model of a static or dynamic analysis -->
	<!-- eval.test: 		code for validating the model of the static or dynamic analysis against what we would expect to be generated from src -->

	<!-- Main Tasks -->
	<!-- clean: 			removes any temporary resources -->
	<!-- compile: 			compiles the src, srcTest, eval, evalTest code -->
	<!-- jar: 				creates a jar of the compiled src code and copies it to depfind_uw -->
	<!-- static: 			runs the static analysis on the code generated from src -->
	<!-- validateStatic:	compares the results of the static analysis to a known oracle -->

	<!-- Main Task TODO -->
	<!-- dynamic:			runs the dynamic analysis using the tests generated from src.test -->
	<!-- validateDynamic:	compares the results of the dynamic analysis to a known oracle -->

	<property name="code" location="code" />
	<property name="build" location="build" />

	<!-- sample code / tests for running sample code (for dynamic analyses) -->
	<property name="src" location="${code}/src" />
	<property name="src.test" location="${code}/srcTest" />

	<!-- eval code / tests for analysis validation -->
	<property name="eval" location="${code}/eval" />
	<property name="eval.test" location="${code}/evalTest" />

	<!-- build directories -->
	<property name="build.src" location="${build}/src" />
	<property name="build.srcTest" location="${build}/srcTest" />
	<property name="build.eval" location="${build}/eval" />
	<property name="build.evalTest" location="${build}/evalTest" />

	<property name="dist" location="dist" />
	<property name="lib" location="lib" />

	<property name="jarFile" location="${dist}/AnalysisBenchmark.jar" />

	<property name="report" location="report" />
	<property name="report.staticAnalysis" location="${report}/static" />
	<property name="report.dynamicAnalysis" location="${report}/dynamic" />
	<property name="report.srcTest" location="${report}/srcTest" />
	<property name="report.evalTest" location="${report}/evalTest" />

	<property name="depfindDir" value="../depfind_uw/" />

	<property name="jiprof.home" value="${lib}/jip-src-1.2" />

	<!-- Start Dependency Finder Properties -->
	<property name="dependencyfinder.home" value="${lib}/DependencyFinder-1.2.1-beta4" />


	<!-- support dynamic tracing -->
	<property name="dynamicTracer.home" value="../dynamictracer" />
	<property name="lsmr.base" value="../ca.lsmr.common" />

	<fileset id="lsmr.lib" dir="${lsmr.base}/lib/">
		<include name="*.jar" />
	</fileset>

	<fileset id="dynamicTracer.lib" dir="${dynamicTracer.home}/lib/">
		<include name="*.jar" />
	</fileset>
	<!-- end tracing -->

	<!--
	<path id="java.classpath">
		<fileset refid="lib" />
		<fileset refid="lsmr.lib" />
		<fileset refid="dynamicTracer.lib" />
		<dirset dir="${lsmr.home}/bin" />
		<dirset dir="${dynamicTracer.home}/bin" />
	</path>
-->


	<path id="dependencyfinder">
		<pathelement location="${dependencyfinder.home}/classes" />
		<pathelement path="${build.eval}" />
		<pathelement location="${lib}/DependencyFinder_dev.jar" />
		<!--
		should be in /lib/DependencyFinder_dev.jar now
		<pathelement location="${dependencyfinder.home}/lib/DependencyFinder.jar" />
		-->
		<pathelement location="${dependencyfinder.home}/lib/jakarta-oro.jar" />
		<pathelement location="${dependencyfinder.home}/lib/log4j.jar" />
	</path>
	<!-- End Dependency Finder Properties -->

	<path id="classpath.src">
		<!-- create classpath -->
		<fileset dir="${lib}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.src}" />
		<pathelement path="${build.srcTest}" />
		<!-- rth: for dynamic -->
		<dirset dir="${lsmr.base}/bin" />
		<dirset dir="${dynamicTracer.home}/bin" />
		<fileset refid="lsmr.lib" />
		<fileset refid="dynamicTracer.lib" />
		<!-- end rth -->
	</path>

	<path id="classpath.eval">
		<!-- create classpath -->
		<fileset dir="${lib}">
			<include name="*.jar" />
		</fileset>
		<!--<pathelement path="${build.src}" />-->
		<pathelement path="${build.eval}" />
		<pathelement path="${build.evalTest}" />
	</path>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
		<mkdir dir="${build.src}" />
		<mkdir dir="${build.srcTest}" />
		<mkdir dir="${build.eval}" />
		<mkdir dir="${build.evalTest}" />
		<mkdir dir="${report.staticAnalysis}" />
		<mkdir dir="${report.dynamicAnalysis}" />
		<mkdir dir="${report.srcTest}" />
		<mkdir dir="${report.evalTest}" />
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete dir="${dist}" />
		<delete dir="${report}" />
	</target>


	<target name="compile" depends="compileSrc,compileEval" description="compile the source" />

	<target name="compileSrc" depends="init" description="compile the source">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build.src}" includeantruntime="false" classpathref="classpath.src" />
		<javac srcdir="${src.test}" destdir="${build.srcTest}" includeantruntime="false" classpathref="classpath.src" />
	</target>

	<target name="compileEval" depends="init" description="compile the source">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${eval}" destdir="${build.eval}" includeantruntime="false" classpathref="classpath.eval" />
		<javac srcdir="${eval.test}" destdir="${build.evalTest}" includeantruntime="false" classpathref="classpath.eval" />
	</target>

	<target name="jar" depends="compile" description="Packages JAR file and copies to depfind_uw for testing">
		<jar jarfile="${jarFile}">
			<zipfileset dir="${build.src}" prefix="" includes="**/*.class" />
		</jar>
		<copy file="${jarFile}" tofile="${depfindDir}/input.jar" overwrite="yes" />
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}/lib" />

		<!-- Put everything in ${build} into the AnalysisBenchmark-${DSTAMP}.jar file -->
		<jar jarfile="${dist}/lib/AnalysisBenchamark-${DSTAMP}.jar" basedir="${build.src}" />
	</target>

	<target name="testSrc" depends="compileSrc" description="perform tests">
		<junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="once">
			<!--<jvmarg value="-Djava.compiler=NONE"/>-->

			<classpath refid="classpath.src" />

			<formatter type="plain" />

			<batchtest todir="${report.srcTest}">
				<fileset dir="${src.test}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>


	<target name="dynamic" depends="compile" description="perform tests">
		<junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="once">
			<!--<jvmarg value="-Djava.compiler=NONE"/>-->

			<!-- all we need to profile -->
			<jvmarg value="-javaagent:${jiprof.home}/profile/profile.jar" />
			<jvmarg value="-Dprofile.properties=${jiprof.home}/profile/jiprof.properties" />
			<!--<jvmarg value="-Dprofile.properties=${jiprof.home}/profile/ant.profile.properties"/>-->

			<classpath refid="classpath.test" />

			<formatter type="plain" />

			<batchtest todir="${report.srcTest}">
				<fileset dir="${src.test}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="validateStatic" depends="static" description="Validate static analyses">
		<junit printsummary="yes" haltonfailure="yes" fork="yes" forkmode="once">
			<!--<jvmarg value="-Djava.compiler=NONE"/>-->
			<classpath refid="classpath.eval" />

			<formatter type="plain" />

			<batchtest todir="${report.evalTest}">
				<fileset dir="${eval.test}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- Start DependencyFinder -->
	<taskdef resource="dependencyfindertasks.properties">
		<classpath refid="dependencyfinder" />
	</taskdef>

	<target name="static" depends="compile" description="perform static analyses">
		<!-- BUG: for unknown reasons 'ant clean; ant static' fails; some environmental thing isn't being set up quite right -->
		<dependencyextractor destfile="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.xml" xml="yes" minimize="yes">
			<path>
				<!-- <pathelement location="."/> -->
				<pathelement location="${build.src}" />
			</path>
		</dependencyextractor>

		<!-- make a copy of the latest extraction for easier reference -->
		<copy file="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.xml" tofile="${report.staticAnalysis}/static_latest.xml" />

		<!-- configure an HTML version of the report -->
		<!-- The stylesheet doesn't work with the UW XML format <xslt style="${dependencyfinder.home}/etc/DependencyGraphToHTML.xsl" in="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.xml" out="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.html" /> -->
		<!-- The stylesheet doesn't work with the UW XML format <copy file="${dependencyfinder.home}/etc/dependency.style.css" tofile="${report.staticAnalysis}/dependency.style.css" overwrite="no" /> -->
		<!-- The stylesheet doesn't work with the UW XML format <copy file="${report.staticAnalysis}/static-${DSTAMP}_${TSTAMP}.html" tofile="${report.staticAnalysis}/static_latest.html" /> -->
	</target>
	<!-- End DependencyFinder -->
</project>